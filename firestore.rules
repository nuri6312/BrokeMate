rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - profiles
    match /users/{userId} {
      // Users can read and write their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow authenticated users to read other profiles for group invitations
      allow read: if request.auth != null;
      // Allow creating user profiles during signup
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Groups collection
    match /groups/{groupId} {
      // Members can read and update groups they belong to
      allow read, update: if request.auth != null && 
        request.auth.uid in resource.data.members;
      // Allow creating new groups
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.createdBy &&
        request.auth.uid in request.resource.data.members;
      // Only group creator can delete (soft delete by setting isActive: false)
      allow update: if request.auth != null && 
        (request.auth.uid in resource.data.members || 
         request.auth.uid == resource.data.createdBy);
    }
    
    // Expenses collection
    match /expenses/{expenseId} {
      // For now, allow authenticated users to read/write expenses
      // TODO: Implement proper group membership validation
      allow read, write: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.paidBy;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Users can only read/write their own notifications
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      // Allow creating notifications for any user (for system notifications)
      allow create: if request.auth != null;
    }
  }
}